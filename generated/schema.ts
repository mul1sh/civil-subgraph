// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExampleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExampleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): ExampleEntity | null {
    return store.get("ExampleEntity", id) as ExampleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get listingAddress(): Bytes {
    let value = this.get("listingAddress");
    return value.toBytes();
  }

  set listingAddress(value: Bytes) {
    this.set("listingAddress", Value.fromBytes(value));
  }

  get challengeID(): BigInt {
    let value = this.get("challengeID");
    return value.toBigInt();
  }

  set challengeID(value: BigInt) {
    this.set("challengeID", Value.fromBigInt(value));
  }
}

export class NewsroomApplication extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewsroomApplication entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewsroomApplication entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewsroomApplication", id.toString(), this);
  }

  static load(id: string): NewsroomApplication | null {
    return store.get("NewsroomApplication", id) as NewsroomApplication | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get applicantAddress(): Bytes {
    let value = this.get("applicantAddress");
    return value.toBytes();
  }

  set applicantAddress(value: Bytes) {
    this.set("applicantAddress", Value.fromBytes(value));
  }

  get listingAddress(): Bytes {
    let value = this.get("listingAddress");
    return value.toBytes();
  }

  set listingAddress(value: Bytes) {
    this.set("listingAddress", Value.fromBytes(value));
  }

  get depositPaid(): BigInt | null {
    let value = this.get("depositPaid");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depositPaid(value: BigInt | null) {
    if (value === null) {
      this.unset("depositPaid");
    } else {
      this.set("depositPaid", Value.fromBigInt(value as BigInt));
    }
  }

  get applicationEndDate(): BigInt | null {
    let value = this.get("applicationEndDate");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set applicationEndDate(value: BigInt | null) {
    if (value === null) {
      this.unset("applicationEndDate");
    } else {
      this.set("applicationEndDate", Value.fromBigInt(value as BigInt));
    }
  }

  get applicationData(): string | null {
    let value = this.get("applicationData");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set applicationData(value: string | null) {
    if (value === null) {
      this.unset("applicationData");
    } else {
      this.set("applicationData", Value.fromString(value as string));
    }
  }
}
